SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[create_player_primary_team_season_percentile] as


-- drop table if exists
if object_id('dbo.player_primary_team_season_percentile', 'U') is not null
drop table dbo.player_primary_team_season_percentile; 


-- insert into table
select	
a.[season]
,a.player_id
,a.player_name
,a.primary_team_id
,a.primary_team_name
,case when [are_min_and_max_equal_minutes]                              = 1 then .5 else (1-0)*(cast([minutes]									as float)	- 		cast([min_minutes]								as float))			/			(cast([max_minutes]										as float)	- 		cast([min_minutes]									as float))+(0+0) end as [percent_minutes]
,case when [are_min_and_max_equal_points]                               = 1 then .5 else (1-0)*(cast([points]                               	as float)	- 		cast([min_points]                            	as float))       	/       	(cast([max_points]                               		as float)	- 		cast([min_points]                            		as float))+(0+0) end as [percent_points]
,case when [are_min_and_max_equal_field_goals_made]                     = 1 then .5 else (1-0)*(cast([field_goals_made]                     	as float)	- 		cast([min_field_goals_made]                  	as float))       	/       	(cast([max_field_goals_made]                     		as float)	- 		cast([min_field_goals_made]                  		as float))+(0+0) end as [percent_field_goals_made]
,case when [are_min_and_max_equal_field_goals_attempted]                = 1 then .5 else (1-0)*(cast([field_goals_attempted]                	as float)	- 		cast([min_field_goals_attempted]             	as float))       	/       	(cast([max_field_goals_attempted]                		as float)	- 		cast([min_field_goals_attempted]             		as float))+(0+0) end as [percent_field_goals_attempted]
,case when [are_min_and_max_equal_free_throws_made]                     = 1 then .5 else (1-0)*(cast([free_throws_made]                     	as float)	- 		cast([min_free_throws_made]                  	as float))       	/       	(cast([max_free_throws_made]                     		as float)	- 		cast([min_free_throws_made]                  		as float))+(0+0) end as [percent_free_throws_made]
,case when [are_min_and_max_equal_free_throws_attempted]                = 1 then .5 else (1-0)*(cast([free_throws_attempted]                	as float)	- 		cast([min_free_throws_attempted]             	as float))       	/       	(cast([max_free_throws_attempted]                		as float)	- 		cast([min_free_throws_attempted]             		as float))+(0+0) end as [percent_free_throws_attempted]
,case when [are_min_and_max_equal_three_pointers_made]                  = 1 then .5 else (1-0)*(cast([three_pointers_made]                  	as float)	- 		cast([min_three_pointers_made]               	as float))       	/       	(cast([max_three_pointers_made]                  		as float)	- 		cast([min_three_pointers_made]               		as float))+(0+0) end as [percent_three_pointers_made]
,case when [are_min_and_max_equal_three_pointers_attempted]             = 1 then .5 else (1-0)*(cast([three_pointers_attempted]             	as float)	- 		cast([min_three_pointers_attempted]          	as float))       	/       	(cast([max_three_pointers_attempted]             		as float)	- 		cast([min_three_pointers_attempted]          		as float))+(0+0) end as [percent_three_pointers_attempted]
,case when [are_min_and_max_equal_offensive_rebounds]                   = 1 then .5 else (1-0)*(cast([offensive_rebounds]                   	as float)	- 		cast([min_offensive_rebounds]                	as float))       	/       	(cast([max_offensive_rebounds]                   		as float)	- 		cast([min_offensive_rebounds]                		as float))+(0+0) end as [percent_offensive_rebounds]
,case when [are_min_and_max_equal_defensive_rebounds]                   = 1 then .5 else (1-0)*(cast([defensive_rebounds]                   	as float)	- 		cast([min_defensive_rebounds]                	as float))       	/       	(cast([max_defensive_rebounds]                   		as float)	- 		cast([min_defensive_rebounds]                		as float))+(0+0) end as [percent_defensive_rebounds]
,case when [are_min_and_max_equal_assists]                              = 1 then .5 else (1-0)*(cast([assists]                              	as float)	- 		cast([min_assists]                           	as float))       	/       	(cast([max_assists]                              		as float)	- 		cast([min_assists]                           		as float))+(0+0) end as [percent_assists]
,case when [are_min_and_max_equal_personal_fouls]                       = 1 then .5 else (1-2)*(cast([personal_fouls]                       	as float)	- 		cast([min_personal_fouls]                    	as float))       	/       	(cast([max_personal_fouls]                       		as float)	- 		cast([min_personal_fouls]                    		as float))+(0+1) end as [percent_personal_fouls]
,case when [are_min_and_max_equal_turnovers]                            = 1 then .5 else (1-2)*(cast([turnovers]                            	as float)	- 		cast([min_turnovers]                         	as float))       	/       	(cast([max_turnovers]                            		as float)	- 		cast([min_turnovers]                         		as float))+(0+1) end as [percent_turnovers]
,case when [are_min_and_max_equal_blocks]                               = 1 then .5 else (1-0)*(cast([blocks]                               	as float)	- 		cast([min_blocks]                            	as float))       	/       	(cast([max_blocks]                               		as float)	- 		cast([min_blocks]                            		as float))+(0+0) end as [percent_blocks]
,case when [are_min_and_max_equal_plus_minus]                           = 1 then .5 else (1-0)*(cast([plus_minus]                           	as float)	- 		cast([min_plus_minus]                        	as float))       	/       	(cast([max_plus_minus]                           		as float)	- 		cast([min_plus_minus]                        		as float))+(0+0) end as [percent_plus_minus]
,case when [are_min_and_max_equal_rebounds]                             = 1 then .5 else (1-0)*(cast([rebounds]                             	as float)	- 		cast([min_rebounds]                          	as float))       	/       	(cast([max_rebounds]                             		as float)	- 		cast([min_rebounds]                          		as float))+(0+0) end as [percent_rebounds]
,case when [are_min_and_max_equal_pra]                                  = 1 then .5 else (1-0)*(cast([pra]                                  	as float)	- 		cast([min_pra]                               	as float))       	/       	(cast([max_pra]                                  		as float)	- 		cast([min_pra]                               		as float))+(0+0) end as [percent_pra]
,case when [are_min_and_max_equal_astocs]                               = 1 then .5 else (1-0)*(cast([astocs]                               	as float)	- 		cast([min_astocs]                            	as float))       	/       	(cast([max_astocs]                               		as float)	- 		cast([min_astocs]                            		as float))+(0+0) end as [percent_astocs]
,case when [are_min_and_max_equal_minutes_rank]                         = 1 then .5 else (1-2)*(cast([minutes_rank]                         	as float)	- 		cast([min_minutes_rank]                      	as float))       	/       	(cast([max_minutes_rank]                         		as float)	- 		cast([min_minutes_rank]                      		as float))+(0+1) end as [percent_minutes_rank]
,case when [are_min_and_max_equal_points_rank]                          = 1 then .5 else (1-2)*(cast([points_rank]                          	as float)	- 		cast([min_points_rank]                       	as float))       	/       	(cast([max_points_rank]                          		as float)	- 		cast([min_points_rank]                       		as float))+(0+1) end as [percent_points_rank]
,case when [are_min_and_max_equal_field_goals_made_rank]                = 1 then .5 else (1-2)*(cast([field_goals_made_rank]                	as float)	- 		cast([min_field_goals_made_rank]             	as float))       	/       	(cast([max_field_goals_made_rank]                		as float)	- 		cast([min_field_goals_made_rank]             		as float))+(0+1) end as [percent_field_goals_made_rank]
,case when [are_min_and_max_equal_field_goals_attempted_rank]           = 1 then .5 else (1-2)*(cast([field_goals_attempted_rank]           	as float)	- 		cast([min_field_goals_attempted_rank]        	as float))       	/       	(cast([max_field_goals_attempted_rank]           		as float)	- 		cast([min_field_goals_attempted_rank]        		as float))+(0+1) end as [percent_field_goals_attempted_rank]
,case when [are_min_and_max_equal_free_throws_made_rank]                = 1 then .5 else (1-2)*(cast([free_throws_made_rank]                	as float)	- 		cast([min_free_throws_made_rank]             	as float))       	/       	(cast([max_free_throws_made_rank]                		as float)	- 		cast([min_free_throws_made_rank]             		as float))+(0+1) end as [percent_free_throws_made_rank]
,case when [are_min_and_max_equal_free_throws_attempted_rank]           = 1 then .5 else (1-2)*(cast([free_throws_attempted_rank]           	as float)	- 		cast([min_free_throws_attempted_rank]        	as float))       	/       	(cast([max_free_throws_attempted_rank]           		as float)	- 		cast([min_free_throws_attempted_rank]        		as float))+(0+1) end as [percent_free_throws_attempted_rank]
,case when [are_min_and_max_equal_three_pointers_made_rank]             = 1 then .5 else (1-2)*(cast([three_pointers_made_rank]             	as float)	- 		cast([min_three_pointers_made_rank]          	as float))       	/       	(cast([max_three_pointers_made_rank]             		as float)	- 		cast([min_three_pointers_made_rank]          		as float))+(0+1) end as [percent_three_pointers_made_rank]
,case when [are_min_and_max_equal_three_pointers_attempted_rank]        = 1 then .5 else (1-2)*(cast([three_pointers_attempted_rank]        	as float)	- 		cast([min_three_pointers_attempted_rank]     	as float))       	/       	(cast([max_three_pointers_attempted_rank]        		as float)	- 		cast([min_three_pointers_attempted_rank]     		as float))+(0+1) end as [percent_three_pointers_attempted_rank]
,case when [are_min_and_max_equal_offensive_rebounds_rank]              = 1 then .5 else (1-2)*(cast([offensive_rebounds_rank]              	as float)	- 		cast([min_offensive_rebounds_rank]           	as float))       	/       	(cast([max_offensive_rebounds_rank]              		as float)	- 		cast([min_offensive_rebounds_rank]           		as float))+(0+1) end as [percent_offensive_rebounds_rank]
,case when [are_min_and_max_equal_defensive_rebounds_rank]              = 1 then .5 else (1-2)*(cast([defensive_rebounds_rank]              	as float)	- 		cast([min_defensive_rebounds_rank]           	as float))       	/       	(cast([max_defensive_rebounds_rank]              		as float)	- 		cast([min_defensive_rebounds_rank]           		as float))+(0+1) end as [percent_defensive_rebounds_rank]
,case when [are_min_and_max_equal_assists_rank]                         = 1 then .5 else (1-2)*(cast([assists_rank]                         	as float)	- 		cast([min_assists_rank]                      	as float))       	/       	(cast([max_assists_rank]                         		as float)	- 		cast([min_assists_rank]                      		as float))+(0+1) end as [percent_assists_rank]
,case when [are_min_and_max_equal_personal_fouls_rank]                  = 1 then .5 else (1-2)*(cast([personal_fouls_rank]                  	as float)	- 		cast([min_personal_fouls_rank]               	as float))       	/       	(cast([max_personal_fouls_rank]                  		as float)	- 		cast([min_personal_fouls_rank]               		as float))+(0+1) end as [percent_personal_fouls_rank]
,case when [are_min_and_max_equal_turnovers_rank]                       = 1 then .5 else (1-2)*(cast([turnovers_rank]                       	as float)	- 		cast([min_turnovers_rank]                    	as float))       	/       	(cast([max_turnovers_rank]                       		as float)	- 		cast([min_turnovers_rank]                    		as float))+(0+1) end as [percent_turnovers_rank]
,case when [are_min_and_max_equal_blocks_rank]                          = 1 then .5 else (1-2)*(cast([blocks_rank]                          	as float)	- 		cast([min_blocks_rank]                       	as float))       	/       	(cast([max_blocks_rank]                          		as float)	- 		cast([min_blocks_rank]                       		as float))+(0+1) end as [percent_blocks_rank]
,case when [are_min_and_max_equal_plus_minus_rank]                      = 1 then .5 else (1-2)*(cast([plus_minus_rank]                      	as float)	- 		cast([min_plus_minus_rank]                   	as float))       	/       	(cast([max_plus_minus_rank]                      		as float)	- 		cast([min_plus_minus_rank]                   		as float))+(0+1) end as [percent_plus_minus_rank]
,case when [are_min_and_max_equal_rebounds_rank]                        = 1 then .5 else (1-2)*(cast([rebounds_rank]                        	as float)	- 		cast([min_rebounds_rank]                     	as float))       	/       	(cast([max_rebounds_rank]                        		as float)	- 		cast([min_rebounds_rank]                     		as float))+(0+1) end as [percent_rebounds_rank]
,case when [are_min_and_max_equal_pra_rank]                             = 1 then .5 else (1-2)*(cast([pra_rank]                             	as float)	- 		cast([min_pra_rank]                          	as float))       	/       	(cast([max_pra_rank]                             		as float)	- 		cast([min_pra_rank]                          		as float))+(0+1) end as [percent_pra_rank]
,case when [are_min_and_max_equal_astocs_rank]							= 1 then .5 else (1-2)*(cast([astocs_rank]                          	as float)	- 		cast([min_astocs_rank]                       	as float))       	/       	(cast([max_astocs_rank]                          		as float)	- 		cast([min_astocs_rank]                       		as float))+(0+1) end as [percent_astocs_rank]
, pie_minutes = cast( minutes as float) / cast(b.[sum_minutes] as float)
, pie_points = cast( points as float) / cast(b.[sum_points] as float)
, pie_field_goals_made = cast( field_goals_made as float) / cast(b.[sum_field_goals_made] as float)
, pie_field_goals_attempted = cast( field_goals_attempted as float) / cast(b.[sum_field_goals_attempted] as float)
, pie_free_throws_made = cast( free_throws_made as float) / cast(b.[sum_free_throws_made] as float)
, pie_free_throws_attempted = cast( free_throws_attempted as float) / cast(b.[sum_free_throws_attempted] as float)
, pie_three_pointers_made = cast( three_pointers_made as float) / cast(b.[sum_three_pointers_made] as float)
, pie_three_pointers_attempted = cast( three_pointers_attempted as float) / cast(b.[sum_three_pointers_attempted] as float)
, pie_offensive_rebounds = cast( offensive_rebounds as float) / cast(b.[sum_offensive_rebounds] as float)
, pie_defensive_rebounds = cast( defensive_rebounds as float) / cast(b.[sum_defensive_rebounds] as float)
, pie_assists = cast( assists as float) / cast(b.[sum_assists] as float)
, pie_personal_fouls = cast( personal_fouls as float) / cast(b.[sum_personal_fouls] as float)
, pie_turnovers = cast( turnovers as float) / cast(b.[sum_turnovers] as float)
, pie_blocks = cast( blocks as float) / cast(b.[sum_blocks] as float)
, pie_rebounds = cast( rebounds as float) / cast(b.[sum_rebounds] as float)
, pie_pra = cast( pra as float) / cast(b.[sum_pra] as float)
, pie_astocs = cast( astocs as float) / cast(b.[sum_astocs] as float)
into player_primary_team_season_percentile
from [dbo].[player_primary_team_season_rank] a
inner join dbo.season_team_min_max_player_stats b on a.season = b.season and a.primary_team_id = b.primary_team_id
GO
